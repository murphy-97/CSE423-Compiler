=== PROJECT INFO ===============================================================

Members:
  Craig Rasband
  Hannah Murphy
  Morgan Edwards
  Preston Ruff

=== USER GUIDE =================================================================

Usage: python compiler.py -i 'input-file'

  Optional arguments:
  -o       Output file. Requires argument
  -h       Prints usage statement
  --p-scn  Prints scanner output
  --p-prs  Prints parser output
  --p-ir   Prints IR output

Required Modules:
  sys
  getopt
  re
  treelib
  collections
  llvmlite

Project Modules:
  compiler
  frontend
    frontend_scanner
    frontend_parser
    frontend_ir_build
  optimizer
  backend
  errors

=== COMPILER DESIGN ============================================================

SCANNER:
  The scanner takes a file object as a parameter and returns a list of token
  descriptors. Each token descriptor is a list of length 3 containing the token,
  the descriptor or type of the token, and the line number of the token. This
  information is used to generate error messages for unrecognized tokens or is
  passed on to the parser.

PARSER:
  The parser takes the token list generated by the scanner and creates an
  abstract syntax tree from the tokens using a grammar. Once it matches a
  sublist of tokens to a grammar rule, it will either take that token and put it
  into the tree, or it will recursively parse the body of the sublist. The
  compiler uses a collection of helper functions to create new subtrees as
  needed.

IR BUILDER:
  The IR builder performs an level-order traversal of the root's children in the
  abstract syntax tree. Each of these children is either a function definition
  or a global variable. In each function definition, the IR builder performs a
  reverse-level-order traversal of the function's subtree (but without entering
  the subtrees of blocks defined within the function, such as in while-loops).
  Each newly defined scope (such as while-loops and if-statements) is a new
  recursive reverse-level-order traversal of the abstract syntax tree. The IR
  builder adds instructions to blocks, blocks to functions, and functions to the
  overall module that contains the entire IR.
  
=== WHAT IS/IS NOT IMPLEMENTED =================================================
  
  SCANNER:
    complete
    
  PARSER:
    Function parsing:               complete
    Expression parsing:             complete
    while statements:               complete
    blocks declared in functions:   complete
    if statements:                  complete
    return statemnts:               complete
    variable declaration:           complete

    function calling:               partial
                                    - Supported if the function call is a single
                                      value, either a variable or constant
                                    - Not yet supported for multiple parameters,
                                      expressions as parameters, or function
                                      calls as parameters 
                                    - Function calls only support variables and
                                      constants as parameters. To pass the
                                      result of an expression or another
                                      function call, assign the result to a
                                      variable.

    fuction prototypes:             incomplete 
    else statement:                 incomplete
    for statments:                  incomplete
    ++ --:                          incomplete
  
  IR:
    Function parsing:               complete
    Expression parsing:             complete
    while statements:               complete
    blocks declared in functions:   complete
    if statements:                  complete
    return statemnts:               complete
    ++ --:                          complete
    
    variable declaration:           complete(ish)
                                    - Does not allow for initialization

    fuction prototypes:             incomplete
                                    (are they necessary at this stage?)

    else statement:                 incomplete

    for statments:                  incomplete
                                    (will be converted to while by parser)

    function calling:               complete(ish)
                                    - See parser section above for limitations
                                      on function calling

  MISC:
    comments:                       complete(ish)
                                    - Multiple line comments are not counted in
                                      line numbers for error reporting

    error reporting:                partially complete
                                    - Multiple line comments creating line
                                      number reporting errors
                                    - Line number information is not preserved
                                      after parsing
                                     
    Function parameters and local parameters cannot have the same name
    Function parameters cannot be redefined via =, +=, -=, etc
    Local variables *can* be redefeind via =, +=, -=, etc

=== PROJECT INFO ==============================================================

Members:
  Craig Rasband
  Hannah Murphy
  Morgan Edwards
  Preston Ruff

=== USER GUIDE =================================================================

Usage: python compiler.py -i 'input-file'

  Optional arguments:
  -o       Output file. Requires argument
  -h       Prints usage statement
  --p-scn  Prints scanner output
  --p-prs  Prints parser output

Required Modules:
  sys
  getopt
  re
  treelib
  collections

Project Modules:
  compiler
  frontend
  optimizer
  backend
  errors

=== COMPILER DESIGN ============================================================

SCANNER:
  The scanner takes a file object as a parameter and returns a list of token
  descriptors. Each token descriptor is a list of length 3 containing the token,
  the descriptor or type of the token, and the line number of the token. This
  information is used to generate error messages for unrecognized tokens or is
  passed on to the parser.

  The following token types are recognized by the scanner:
    NUMCONST  FLOATCONST    CHARCONST   STRINGCONST    sumop  unaryop  mulop
    keyword   preDirective  fileImport  typeSpecifier  ID     relop    return
    ( ) { }  ; = ++ -- += -= *= /= true false &&  ||  !

PARSER:
  The parser takes the token list generated by the scanner and creates an abstract
  index tree from the tokens using a grammar. Once it matches a sublist of tokens
  to a grammar rule, it will either take that token and put it into the tree, or
  it will recursively parse the body of the sublist.